#!/usr/bin/env python
# coding: utf-8

""" landcover_classif.py: Land cover classification with machine learning (random forest)
Eduardo Jimenez <eduardojh@email.arizona.edu>

  Sep 16, 2022: Ported from San Juan River script.
  Jan 13, 2023: Modified for Calakmul Biosphere Reserve (local machine).
  Feb 21, 2023: Updated to use sample mask generated by stratified random sampling (moved to '01_sample_mask.py').
  May  1, 2023: RF runs with HDF5 data but needs tunning for accurate predictions.
  Jun 12, 2023: RF works and predicts okay after applying back the KISS philosophy

NOTE: run under 'rsml' conda environment (python 3.8.13, scikit-learn 1.1.2)
"""
import os
import sys
import csv

if len(sys.argv) == 3:
    # Check if arguments were passed from terminal
    args = sys.argv[1:]
    sys.path.insert(0, args[0])
    cwd = args[1]
    print(f"  Using RS_LIB={args[0]}")
    print(f"  Using CWD={args[1]}")
else:
    import os
    import platform
    system = platform.system()
    if system == 'Windows':
        # On Windows 10
        sys.path.insert(0, 'D:/Desktop/land_cover_analysis/lib/')
        cwd = 'D:/Desktop/CALAKMUL/ROI1/'
    elif system == 'Linux' and os.path.isdir('/vipdata/2023/CALAKMUL/ROI1/'):
        # On Ubuntu Workstation
        sys.path.insert(0, '/vipdata/2023/land_cover_analysis/lib/')
        cwd = '/vipdata/2023/CALAKMUL/ROI1/'
    elif system == 'Linux' and os.path.isdir('/VIP/engr-didan02s/DATA/EDUARDO/ML/'):
        # On Alma Linux Server
        # sys.path.insert(0, '/home/eduardojh/Documents/land_cover_analysis/lib/')
        sys.path.insert(0, '/data/ssd/eduardojh/land_cover_analysis/lib/')
        cwd = '/VIP/engr-didan02s/DATA/EDUARDO/ML/'
    else:
        print('  System not yet configured!')

import rsmodule as rs

# Directories
datadir = "/VIP/engr-didan02s/DATA/EDUARDO/CALAKMUL/ROI2/02_STATS/"
phenodir = "/VIP/engr-didan02s/DATA/EDUARDO/CALAKMUL/ROI2/03_PHENO/"
cwd = "/VIP/engr-didan02s/DATA/EDUARDO/ML/ROI2/"
ancillary_dir = "/VIP/engr-didan02s/DATA/EDUARDO/ML/ROI2/data/ancillary/"
# # Ancillary {ancillary_file_name: class_to_incorporate}
# ancillary_dict = {101: ["ag_roi2.tif"], 102: ["roads_roi2.tif", "urban_roi2.tif"]}

# Data files
fn_landcover_orig = "data/inegi/usv250s7cw2018_ROI2full.tif"  # raster with full extent

list_tiles = ['h19v25', 'h20v24', 'h20v25', 'h20v26', 'h21v23',
              'h21v24', 'h21v25', 'h21v26', 'h22v22', 'h22v23',
              'h22v24', 'h22v25', 'h22v26', 'h23v22', 'h23v23',
              'h23v24', 'h23v25']

# Use NDVI by deafult
# lcd = rs.LandCoverDataset(datadir, phenodir, cwd, fn_landcover_orig)
# # Ancillary data already integrated
# # lcd.incorporate_ancillary(ancillary_dir, ancillary_dict)
# lcd.create_tile_dataset(list_tiles, save_labels_raster=True, save_features=True, by_season=True)
# # lcd.classify_by_tile(list_tiles)

# For EVI
# lcd = rs.LandCoverDataset(datadir, phenodir, cwd, fn_landcover_orig, phenobased='EVI')
# lcc.create_tile_dataset(list_tiles, save_features=True, by_season=True)

fn_landcover = os.path.join(cwd, fn_landcover_orig[:-4] + "_ancillary.tif")
lcc = rs.LandCoverClassifier(cwd, list_tiles, fn_landcover, "NDVI")
lcc.classify_by_tile(['h19v25'])







# # Custom spatial reference, Albers Equal Area Conic (USGS)
# proj4albers = "+proj=aea +datum=WGS84 +lat_1=29.5 +lat_2=45.5 +lon_0=-96.0 +lat_0=23.0"  # custom spatial reference

# # Ancillary {ancillary_file_name: class_to_incorporate}
# ancillary_dict = {101: ["ag_roi2.tif"], 102: ["roads_roi2.tif", "urban_roi2.tif"]}
# 
# fn_landcover = "data/inegi/usv250s7cw2018_ROI2full_ancillary.tif"
# rs.incorporate_ancillary(ancillary_dir, cwd + fn_landcover_orig, proj4albers, ancillary_dict, cwd + fn_landcover)

# fn_grp_keys = 'data/inegi_2018/land_cover_groups.csv'

# fn_albers_extent = os.path.join(cwd, 'parameters/albers_tiles.txt')

# # Split the labels
# albers_tiles_list = ['h19v25', 'h20v24', 'h20v25', 'h20v26', 'h21v23',
#               'h21v24', 'h21v25', 'h21v26', 'h22v22', 'h22v23',
#               'h22v24', 'h22v25', 'h22v26', 'h23v22', 'h23v23',
#               'h23v24', 'h23v25']

# # Already done!
# # Split the labels into Albers Equal Area projection tiles
# rs.split_raster_labels(os.path.join(cwd + fn_landcover),
#                        albers_tiles_list,
#                        fn_albers_extent,
#                        cwd + 'data/inegi/',
#                        proj4albers)
# tile = 'h19v25'
# lcc = rs.LandCoverClassif(datadir, phenodir, cwd, fn_landcover, tile)
# lcc.set_spatial_reference(proj4albers)
# # lcc.sample(training_percent=0.05, maximum_trials=300000)
# lcc.create_dataset(fill=True)

# New implementation
